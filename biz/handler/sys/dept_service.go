// Code generated by hertz generator.

package sys

import (
	"context"

	"github.com/DrReMain/cyber-base-server/biz/common/res"
	"github.com/DrReMain/cyber-base-server/biz/dal/sys_model"
	pagination "github.com/DrReMain/cyber-base-server/biz/hertz_gen/common/pagination"
	sys "github.com/DrReMain/cyber-base-server/biz/hertz_gen/sys"
	cutils_default "github.com/DrReMain/cyber-base-server/cyber/utils/default"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/gofrs/uuid/v5"
)

// CreateDept .
// @router /v1/sys/dept/create [POST]
func CreateDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.CreateDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &sys.CreateDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}
	{
		m := &sys_model.SysDept{
			UUID:     uuid.Must(uuid.NewV4()),
			DeptName: *req.DeptName,
			Remark:   *req.Remark,
		}
		err = sys_model.CreateDept(m)
		if err != nil {
			o := &sys.CreateDeptRes{
				Base:   res.BaseInternalFail(),
				Result: nil,
			}
			res.InternalFail(c, o, err, res.Json(m))
			return
		}
	}

	res.Success(c, &sys.CreateDeptRes{
		Base:   res.BaseSuccess(),
		Result: nil,
	})
}

// UpdateDept .
// @router /v1/sys/dept/:id [PUT]
func UpdateDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.UpdateDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &sys.UpdateDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}
	{
		m := &sys_model.SysDept{
			DeptName: *req.DeptName,
			Remark:   *req.Remark,
		}
		err = sys_model.UpdateDept(m, uint64(req.ID))
		if err != nil {
			o := &sys.UpdateDeptRes{
				Base:   res.BaseInternalFail(),
				Result: nil,
			}
			res.InternalFail(c, o, err, res.Json(m))
			return
		}
	}

	res.Success(c, &sys.UpdateDeptRes{
		Base:   res.BaseSuccess(),
		Result: nil,
	})
}

// DeleteDept .
// @router /v1/sys/dept/:id [DELETE]
func DeleteDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.DeleteDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &sys.DeleteDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}
	{
		err = sys_model.DeleteDept(uint64(req.ID))
		if err != nil {
			o := &sys.DeleteDeptRes{
				Base:   res.BaseInternalFail(),
				Result: nil,
			}
			res.InternalFail(c, o, err, res.Json(utils.H{"id": req.ID}))
			return
		}
	}

	res.Success(c, &sys.DeleteDeptRes{
		Base:   res.BaseSuccess(),
		Result: nil,
	})
}

// QueryAllDept .
// @router /v1/sys/dept/list_all [GET]
func QueryAllDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.QueryAllDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &sys.QueryAllDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}
	l, err := sys_model.QueryDeptAll(cutils_default.String(req.DeptName))
	if err != nil {
		o := &sys.DeleteDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}
		res.InternalFail(c, o, err, res.Json(utils.H{"dept_name": cutils_default.String(req.DeptName)}))
		return
	}
	result := make([]*sys.Dept, 0, len(l))
	for _, dept := range l {
		result = append(result, &sys.Dept{
			ID:       int64(dept.ID),
			UUID:     dept.UUID.String(),
			DeptName: dept.DeptName,
			Remark:   dept.Remark,
		})
	}

	res.Success(c, &sys.QueryAllDeptRes{
		Base:   res.BaseSuccess(),
		Result: result,
	})
}

// QueryListDept .
// @router /v1/sys/dept/list [GET]
func QueryListDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.QueryListDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &sys.QueryListDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	l, n, s, t, m, err := sys_model.QueryDeptList(
		cutils_default.Int(req.PageNum, 1),
		cutils_default.Int(req.PageSize, 10),
		cutils_default.String(req.DeptName),
	)
	if err != nil {
		o := &sys.QueryListDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}
		res.InternalFail(c, o, err)
		return
	}
	list := make([]*sys.Dept, 0, len(l))
	for _, dept := range l {
		list = append(list, &sys.Dept{
			ID:       int64(dept.ID),
			UUID:     dept.UUID.String(),
			DeptName: dept.DeptName,
			Remark:   dept.Remark,
		})
	}

	res.Success(c, &sys.QueryListDeptRes{
		Base: res.BaseSuccess(),
		Result: &sys.PResult{
			P: &pagination.P{
				Total:    t,
				More:     m,
				PageSize: int32(s),
				PageNum:  int32(n),
			},
			List: list,
		},
	})
}

// QueryItemDept .
// @router /v1/sys/dept/:id [GET]
func QueryItemDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.QueryItemDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &sys.QueryItemDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	item, err := sys_model.QueryDeptItem(uint64(req.ID))
	if err != nil {
		res.InternalFail(c, &sys.QueryItemDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err)
		return
	}

	res.Success(c, &sys.QueryItemDeptRes{
		Base: res.BaseSuccess(),
		Result: &sys.Dept{
			ID:       int64(item.ID),
			UUID:     item.UUID.String(),
			DeptName: item.DeptName,
			Remark:   item.Remark,
		},
	})
}
