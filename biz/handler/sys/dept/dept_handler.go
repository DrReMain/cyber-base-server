// Code generated by hertz generator.

package dept

import (
	"context"

	"github.com/DrReMain/cyber-base-server/biz/common/res"
	dept "github.com/DrReMain/cyber-base-server/biz/hertz_gen/sys/dept"
	sys_dept_service "github.com/DrReMain/cyber-base-server/biz/service/sys/dept"
	cutils_default "github.com/DrReMain/cyber-base-server/cyber/utils/default"

	"github.com/cloudwego/hertz/pkg/app"
)

// CreateDept .
// @router /v1/sys/dept/create [POST]
func CreateDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dept.CreateDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &dept.CreateDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	m, err := sys_dept_service.NewService(ctx, c).CreateDept(&req)
	if err != nil {
		res.InternalFail(c, &dept.CreateDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err, res.Json(m))
		return
	}

	res.Success(c, &dept.CreateDeptRes{
		Base:   res.BaseSuccess(),
		Result: nil,
	})
}

// UpdateDept .
// @router /v1/sys/dept/:id [PUT]
func UpdateDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dept.UpdateDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &dept.UpdateDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	m, err := sys_dept_service.NewService(ctx, c).UpdateDept(&req)
	if err != nil {
		res.InternalFail(c, &dept.UpdateDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err, res.Json(m))
		return
	}

	res.Success(c, &dept.UpdateDeptRes{
		Base:   res.BaseSuccess(),
		Result: nil,
	})
}

// DeleteDept .
// @router /v1/sys/dept/:id [DELETE]
func DeleteDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dept.DeleteDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &dept.DeleteDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	err = sys_dept_service.NewService(ctx, c).DeleteDept(&req)
	if err != nil {
		res.InternalFail(c, &dept.DeleteDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err, req.ID)
		return
	}

	res.Success(c, &dept.DeleteDeptRes{
		Base:   res.BaseSuccess(),
		Result: nil,
	})
}

// QueryAllDept .
// @router /v1/sys/dept/list_all [GET]
func QueryAllDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dept.QueryAllDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &dept.QueryAllDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	l, err := sys_dept_service.NewService(ctx, c).QueryAllDept(&req)
	if err != nil {
		res.InternalFail(c, &dept.DeleteDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err)
		return
	}

	result := make([]*dept.Dept, 0, len(*l))
	for _, d := range *l {
		result = append(result, &dept.Dept{
			ID:       d.ID,
			DeptName: cutils_default.String(d.DeptName),
			Remark:   cutils_default.String(d.Remark),
		})
	}

	res.Success(c, &dept.QueryAllDeptRes{
		Base:   res.BaseSuccess(),
		Result: result,
	})
}

// QueryListDept .
// @router /v1/sys/dept/list [GET]
func QueryListDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dept.QueryListDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &dept.QueryListDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	l, t, m, n, s, err := sys_dept_service.NewService(ctx, c).QueryListDept(&req)
	if err != nil {
		res.InternalFail(c, &dept.QueryListDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err)
		return
	}

	list := make([]*dept.Dept, 0, len(*l))
	for _, d := range *l {
		list = append(list, &dept.Dept{
			ID:       d.ID,
			DeptName: cutils_default.String(d.DeptName),
			Remark:   cutils_default.String(d.Remark),
		})
	}

	res.Success(c, &dept.QueryListDeptRes{
		Base: res.BaseSuccess(),
		Result: &dept.PResult{
			P:    res.P(t, m, n, s),
			List: list,
		},
	})
}

// QueryItemDept .
// @router /v1/sys/dept/:id [GET]
func QueryItemDept(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dept.QueryItemDeptReq
	err = c.BindAndValidate(&req)
	if err != nil {
		res.ValidateFail(c, &dept.QueryItemDeptRes{
			Base:   res.BaseValidateFail(err),
			Result: nil,
		}, err, res.Json(req))
		return
	}

	item, err := sys_dept_service.NewService(ctx, c).QueryItemDept(&req)
	if err != nil {
		res.InternalFail(c, &dept.QueryItemDeptRes{
			Base:   res.BaseInternalFail(),
			Result: nil,
		}, err)
		return
	}

	res.Success(c, &dept.QueryItemDeptRes{
		Base: res.BaseSuccess(),
		Result: &dept.Dept{
			ID:       item.ID,
			DeptName: cutils_default.String(item.DeptName),
			Remark:   cutils_default.String(item.Remark),
		},
	})
}
