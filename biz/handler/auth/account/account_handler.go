// Code generated by hertz generator.

package account

import (
	"context"

	"github.com/DrReMain/cyber-base-server/biz/common/errc"
	"github.com/DrReMain/cyber-base-server/biz/common/res"
	account "github.com/DrReMain/cyber-base-server/biz/hertz_gen/auth/account"
	auth_account_service "github.com/DrReMain/cyber-base-server/biz/service/auth/account"

	"github.com/cloudwego/hertz/pkg/app"
)

// Register .
// @router /v1/auth/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req account.RegisterAccountReq
	r := res.NewRes(ctx, c, &req)

	err = c.BindAndValidate(&req)
	if err != nil {
		err = errc.ParamsInvalidErr.WithMsg(err.Error())
		r.Fail(err, &account.RegisterAccountRes{
			Base:   r.Base(err),
			Result: nil,
		})
		return
	}

	err = auth_account_service.NewService(ctx, c).Register(&req)
	if err != nil {
		r.Fail(err, &account.RegisterAccountRes{
			Base:   r.Base(err),
			Result: nil,
		})
		return
	}

	r.Success(&account.RegisterAccountRes{
		Base:   r.Base(),
		Result: nil,
	})
}

// Login .
// @router /v1/auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req account.LoginAccountReq
	r := res.NewRes(ctx, c, &req)

	err = c.BindAndValidate(&req)
	if err != nil {
		err = errc.ParamsInvalidErr.WithMsg(err.Error())
		r.Fail(err, &account.LoginAccountRes{
			Base:   r.Base(err),
			Result: nil,
		})
		return
	}

	accessToken, err := auth_account_service.NewService(ctx, c).Login(&req)
	if err != nil {
		r.Fail(err, &account.LoginAccountRes{
			Base:   r.Base(err),
			Result: nil,
		})
		return
	}

	r.Success(&account.LoginAccountRes{
		Base: r.Base(),
		Result: &account.LoginAccountResult{
			AccessToken: accessToken,
		},
	})
}
